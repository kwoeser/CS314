

# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp      # Set up stack pointer
    call main       # Execute main program
    halt            # Terminate program

    
# Array of 10 elements
.align 8
array:  
    .quad 0x000000000001
    .quad 0x000000000002
    .quad 0x000000000003
    .quad 0x000000000004
    .quad 0x000000000005
    .quad 0x000000000006
    .quad 0x000000000007
    .quad 0x000000000008
    .quad 0x000000000009
    .quad 0x000000000010

    
    
    
    
    
    
    
    

    
#void swap(long *xp, long *yp) {
#        long x = *xp;
#        long y = *yp;
#        *xp = y;
#        *yp = x;
#}
    
    
swap:
    # xp in rdi, yp in rax
    # x in rsi, y in rdx

    # load from memory
    mrmovq (%rdi), %rax  // x = *xp
    mrmovq (%rsi), %rcx  // y = *yp
    
    # swap: place back in memory
    rmmovq %rcx, (%rdi)  // *xp = y
    rmmovq %rax, (%rsi)  // *yp = x
    

    ret
    
    
    

    
    
#void sortGOTO(long *arr, long length) {
#    long sorted = 0;
#    
#    SORT:
#       for (long i = 0; i < length - 1; ++i) {
#           if (arr[i] > arr[i + 1]) {
#               swap(&arr[i], &arr[i+1]);
#               sorted = 0;
#           }
#       }
#
#    if (!sorted) {
#       goto SORT;
#    }
#}



sort:
    pushq %rbp
    movq %rsp, %rbp
    subq $8, %rsp        # allocate space for i and sorted on the stack
    movq 16(%rbp), %rdi  # load arr into %rdi
    movq 24(%rbp), %rcx  # load length into %rcx
    movq $0, -8(%rbp)    # initialize sorted to 0
loop1:
    movq $1, %rax        # set %rax to 1
    movq -8(%rbp), %rbx  # load sorted into %rbx
    cmpq %rax, %rbx      # compare sorted and 1
    je end1              # jump to end1 if they are equal
    movq $0, -8(%rbp)    # set sorted to 0
    movq $0, -16(%rbp)   # initialize i to 0
loop2:
    movq -16(%rbp), %rax # load i into %rax
    cmpq %rcx, %rax      # compare i and length
    jge end2             # jump to end2 if i >= length
    movq (%rdi,%rax,8), %rdx    # load arr[i] into %rdx
    movq 8(%rdi,%rax,8), %rbx   # load arr[i+1] into %rbx
    cmpq %rdx, %rbx      # compare arr[i] and arr[i+1]
    jle cont2            # jump to cont2 if arr[i] <= arr[i+1]
    pushq %rdi           # save %rdi and %rax for swap
    pushq %rax
    

    
    
sort: 

    pushq %rbx
    pushq %rax
    call swap
    popq %rax
    popq %rbx
    
loop: 

    movq
    
main:   
    
    pushq %rbp           # Set up stack frame
    rrmovq %rsp, %rbp
    call sort            # Call the sort procedure
    popq %rbp            # Restore stack pointer
    ret


# Stack starts here and grows to lower addresses
.pos 0x200
stack:

