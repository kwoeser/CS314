# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Array of 4 elements
	.align 8
array:	
    .quad 0x000000000010
    .quad 0x000000000009
    .quad 0x000000000008
    .quad 0x000000000007
    .quad 0x000000000006
    .quad 0x000000000005
    .quad 0x000000000004
    .quad 0x000000000003
    .quad 0x000000000002
    .quad 0x000000000001

main:	
    irmovq array,%rdi
	#irmovq $10,  %rsi
	irmovq array, %rsi
	iaddq %8, %rsi # &a[1]
	call swap
	#call swapPairs		# swapPairs(array, 10)
	ret

	
#void swapPairs(long *a, long n) {
#        long *i = &a[0];
#        long *j = &a[1];
#        LOOP:
#            swap(i, j);
#            i += 2;
#            j += 2;
#            // dec n
#            n -= 2;
#            // jump on coniditon
#            if (n > 0) goto LOOP;
#}

# reuse a for 1 (rdi)
# move n for r8
# use rsi for j

swapPairs:
    # &a[0] is in rdi, n in rsi
    # want &a[1] in rsi, need to move n
    rrmovq %rsi ,%r8
    rrmovq %rdi, %rsi
    iaddq %8, %rsi
    # now we have &a[0] in rdi, &a[1] in rsi
    LOOP: 
        # call swap
        call swap
        # inc pointers 
        iaddq %16, %rdi
        iaddq %16, %rsi
        # decrement counter 
        isubq %2, %r8
        # cond, jump
        jg LOOP
        
        
    ret

#void swap(long *xp, long *yp) {
#        long x = *xp;
#        long y = *yp;
#        *xp = y;
#        *yp = x;
#}
    
    
swap:
    # xp in rdi, yp in rsi
    # x in rdx, y in rcx
    # moves work like XXmovq, where X's are:
    # i: immediate val
    # r: register 
    # m: memory
    # load from memory
    
    mrmovq(%rdi), %rdx
    mrmovq(%rsi), %rcx
    
    # swap: place back in memory
    rmmovq %rdx, (%rsi)
    rmmovq %rcx, (%rdi)
    ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
